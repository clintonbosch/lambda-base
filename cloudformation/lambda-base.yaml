Parameters:
  CodeS3Bucket:
    Type: String
    Default: pfs-software
    Description: The bucket containing the Gamify lambda jar file

  LambdaCodeS3Key:
    Type: String
    Default: lambda/lambda-base/lambda-base-1.0.0.jar
    Description: The Gamify lambda jar file key (path)

Resources:
  LambdaBaseRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      MaxSessionDuration: 3600
      Path: "/"
      RoleName: "lambda-base-role"

  BaseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Description: "1.0.0 lambda-base"
      FunctionName: lambda-base
      Handler: za.co.prescient.ApiGatewayController
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - "LambdaBaseRole"
          - "Arn"
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Runtime: "java21"
      Timeout: 30
      Environment:
        Variables:
          endpoint: xxx

  BaseRestApi:
    DependsOn:
      - BaseLambda
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "BaseAPI"

  #------------------------------------------------------------------------------------------------------------------------
  APIResourceFoo:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BaseRestApi
      ParentId:
        Fn::GetAtt:
          - BaseRestApi
          - "RootResourceId"
      PathPart: "foo"

  #------------------------------------------------------------------------------------------------------------------------
  APIResourceFooBaa:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BaseRestApi
      ParentId: !Ref APIResourceFoo
      PathPart: "baa"

  APIGetMethodFooBaa:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ApiKeyRequired: false
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt BaseLambda.Arn
      ResourceId: !Ref APIResourceFooBaa
      RestApiId: !Ref BaseRestApi

  APIGetMethodFooBaaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BaseLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BaseRestApi}/*/GET/foo/baa

  #------------------------------------------------------------------------------------------------------------------------
  BaseDeployment:
    DependsOn:
      - APIGetMethodFooBaa
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref BaseRestApi
      Description: "Production deployment"
      StageName: Prod

Outputs:
  lambdaArn:
    Value: !GetAtt "BaseLambda.Arn"
